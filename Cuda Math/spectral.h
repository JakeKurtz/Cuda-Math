/* ---------------------------------------------------------------------------------- *
*
*    MIT License
*
*    Copyright(c) 2024 Jake Kurtz
*
*    Permission is hereby granted, free of charge, to any person obtaining a copy
*    of this softwareand associated documentation files(the "Software"), to deal
*    in the Software without restriction, including without limitation the rights
*    to use, copy, modify, merge, publish, distribute, sublicense, and /or sell
*    copies of the Software, and to permit persons to whom the Software is
*    furnished to do so, subject to the following conditions :
*
*    The above copyright noticeand this permission notice shall be included in all
*    copies or substantial portions of the Software.
*
*    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
*    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*    SOFTWARE.
*
* ---------------------------------------------------------------------------------- */

#include "vec.h"
#include "mat.h"
#include "random.h"

#ifndef _CML_SPECTRAL_
#define _CML_SPECTRAL_

//#define CIE_1NM
//#define CIE_5NM
#define CIE_FIT

#define WAVELENGTH_SAMPLE_HERO
//#define WAVELENGTH_SAMPLE_UNIFROM
//#define WAVELENGTH_SAMPLE_FIXED

namespace cml
{
	const unsigned int LAMBDA_SAMPLES = 60;
	const float LAMBDA_MIN = 380.f;
	const float LAMBDA_MAX = 780.f;
	const float LAMBDA_STEP = (LAMBDA_MAX - LAMBDA_MIN) / float(LAMBDA_SAMPLES);

	const float CIE_MIN = 360.f;
	const float CIE_MAX = 830.f;

	const float CIE_Y_INTEGRAL =		106.85691664936203;
	const float CIE_Y_D65_INTEGRAL =	98.89001078341919;

	const float SCALE = (LAMBDA_MAX - LAMBDA_MIN) / (float(LAMBDA_SAMPLES) * CIE_Y_D65_INTEGRAL);

#if defined(CIE_1NM)
	const unsigned int CIE_SAMPLES = 471;
	const float CIE_STEP = 1.f;

	const float CIE_X[CIE_SAMPLES] = { 0.000129900000, 0.000145847000, 0.000163802100, 0.000184003700, 0.000206690200, 0.000232100000, 0.000260728000, 0.000293075000, 0.000329388000, 0.000369914000, 0.000414900000, 0.000464158700, 0.000518986000, 0.000581854000, 0.000655234700, 0.000741600000, 0.000845029600, 0.000964526800, 0.001094949000, 0.001231154000, 0.001368000000, 0.001502050000, 0.001642328000, 0.001802382000, 0.001995757000, 0.002236000000, 0.002535385000, 0.002892603000, 0.003300829000, 0.003753236000, 0.004243000000, 0.004762389000, 0.005330048000, 0.005978712000, 0.006741117000, 0.007650000000, 0.008751373000, 0.010028880000, 0.011421700000, 0.012869010000, 0.014310000000, 0.015704430000, 0.017147440000, 0.018781220000, 0.020748010000, 0.023190000000, 0.026207360000, 0.029782480000, 0.033880920000, 0.038468240000, 0.043510000000, 0.048995600000, 0.055022600000, 0.061718800000, 0.069212000000, 0.077630000000, 0.086958110000, 0.097176720000, 0.108406300000, 0.120767200000, 0.134380000000, 0.149358200000, 0.165395700000, 0.181983100000, 0.198611000000, 0.214770000000, 0.230186800000, 0.244879700000, 0.258777300000, 0.271807900000, 0.283900000000, 0.294943800000, 0.304896500000, 0.313787300000, 0.321645400000, 0.328500000000, 0.334351300000, 0.339210100000, 0.343121300000, 0.346129600000, 0.348280000000, 0.349599900000, 0.350147400000, 0.350013000000, 0.349287000000, 0.348060000000, 0.346373300000, 0.344262400000, 0.341808800000, 0.339094100000, 0.336200000000, 0.333197700000, 0.330041100000, 0.326635700000, 0.322886800000, 0.318700000000, 0.314025100000, 0.308884000000, 0.303290400000, 0.297257900000, 0.290800000000, 0.283970100000, 0.276721400000, 0.268917800000, 0.260422700000, 0.251100000000, 0.240847500000, 0.229851200000, 0.218407200000, 0.206811500000, 0.195360000000, 0.184213600000, 0.173327300000, 0.162688100000, 0.152283300000, 0.142100000000, 0.132178600000, 0.122569600000, 0.113275200000, 0.104297900000, 0.095640000000, 0.087299550000, 0.079308040000, 0.071717760000, 0.064580990000, 0.057950010000, 0.051862110000, 0.046281520000, 0.041150880000, 0.036412830000, 0.032010000000, 0.027917200000, 0.024144400000, 0.020687000000, 0.017540400000, 0.014700000000, 0.012161790000, 0.009919960000, 0.007967240000, 0.006296346000, 0.004900000000, 0.003777173000, 0.002945320000, 0.002424880000, 0.002236293000, 0.002400000000, 0.002925520000, 0.003836560000, 0.005174840000, 0.006982080000, 0.009300000000, 0.012149490000, 0.015535880000, 0.019477520000, 0.023992770000, 0.029100000000, 0.034814850000, 0.041120160000, 0.047985040000, 0.055378610000, 0.063270000000, 0.071635010000, 0.080462240000, 0.089739960000, 0.099456450000, 0.109600000000, 0.120167400000, 0.131114500000, 0.142367900000, 0.153854200000, 0.165500000000, 0.177257100000, 0.189140000000, 0.201169400000, 0.213365800000, 0.225749900000, 0.238320900000, 0.251066800000, 0.263992200000, 0.277101700000, 0.290400000000, 0.303891200000, 0.317572600000, 0.331438400000, 0.345482800000, 0.359700000000, 0.374083900000, 0.388639600000, 0.403378400000, 0.418311500000, 0.433449900000, 0.448795300000, 0.464336000000, 0.480064000000, 0.495971300000, 0.512050100000, 0.528295900000, 0.544691600000, 0.561209400000, 0.577821500000, 0.594500000000, 0.611220900000, 0.627975800000, 0.644760200000, 0.661569700000, 0.678400000000, 0.695239200000, 0.712058600000, 0.728828400000, 0.745518800000, 0.762100000000, 0.778543200000, 0.794825600000, 0.810926400000, 0.826824800000, 0.842500000000, 0.857932500000, 0.873081600000, 0.887894400000, 0.902318100000, 0.916300000000, 0.929799500000, 0.942798400000, 0.955277600000, 0.967217900000, 0.978600000000, 0.989385600000, 0.999548800000, 1.009089200000, 1.018006400000, 1.026300000000, 1.033982700000, 1.040986000000, 1.047188000000, 1.052466700000, 1.056700000000, 1.059794400000, 1.061799200000, 1.062806800000, 1.062909600000, 1.062200000000, 1.060735200000, 1.058443600000, 1.055224400000, 1.050976800000, 1.045600000000, 1.039036900000, 1.031360800000, 1.022666200000, 1.013047700000, 1.002600000000, 0.991367500000, 0.979331400000, 0.966491600000, 0.952847900000, 0.938400000000, 0.923194000000, 0.907244000000, 0.890502000000, 0.872920000000, 0.854449900000, 0.835084000000, 0.814946000000, 0.794186000000, 0.772954000000, 0.751400000000, 0.729583600000, 0.707588800000, 0.685602200000, 0.663810400000, 0.642400000000, 0.621514900000, 0.601113800000, 0.581105200000, 0.561397700000, 0.541900000000, 0.522599500000, 0.503546400000, 0.484743600000, 0.466193900000, 0.447900000000, 0.429861300000, 0.412098000000, 0.394644000000, 0.377533300000, 0.360800000000, 0.344456300000, 0.328516800000, 0.313019200000, 0.298001100000, 0.283500000000, 0.269544800000, 0.256118400000, 0.243189600000, 0.230727200000, 0.218700000000, 0.207097100000, 0.195923200000, 0.185170800000, 0.174832300000, 0.164900000000, 0.155366700000, 0.146230000000, 0.137490000000, 0.129146700000, 0.121200000000, 0.113639700000, 0.106465000000, 0.099690440000, 0.093330610000, 0.087400000000, 0.081900960000, 0.076804280000, 0.072077120000, 0.067686640000, 0.063600000000, 0.059806850000, 0.056282160000, 0.052971040000, 0.049818610000, 0.046770000000, 0.043784050000, 0.040875360000, 0.038072640000, 0.035404610000, 0.032900000000, 0.030564190000, 0.028380560000, 0.026344840000, 0.024452750000, 0.022700000000, 0.021084290000, 0.019599880000, 0.018237320000, 0.016987170000, 0.015840000000, 0.014790640000, 0.013831320000, 0.012948680000, 0.012129200000, 0.011359160000, 0.010629350000, 0.009938846000, 0.009288422000, 0.008678854000, 0.008110916000, 0.007582388000, 0.007088746000, 0.006627313000, 0.006195408000, 0.005790346000, 0.005409826000, 0.005052583000, 0.004717512000, 0.004403507000, 0.004109457000, 0.003833913000, 0.003575748000, 0.003334342000, 0.003109075000, 0.002899327000, 0.002704348000, 0.002523020000, 0.002354168000, 0.002196616000, 0.002049190000, 0.001910960000, 0.001781438000, 0.001660110000, 0.001546459000, 0.001439971000, 0.001340042000, 0.001246275000, 0.001158471000, 0.001076430000, 0.000999949300, 0.000928735800, 0.000862433200, 0.000800750300, 0.000743396000, 0.000690078600, 0.000640515600, 0.000594502100, 0.000551864600, 0.000512429000, 0.000476021300, 0.000442453600, 0.000411511700, 0.000382981400, 0.000356649100, 0.000332301100, 0.000309758600, 0.000288887100, 0.000269539400, 0.000251568200, 0.000234826100, 0.000219171000, 0.000204525800, 0.000190840500, 0.000178065400, 0.000166150500, 0.000155023600, 0.000144621900, 0.000134909800, 0.000125852000, 0.000117413000, 0.000109551500, 0.000102224500, 0.000095394450, 0.000089023900, 0.000083075270, 0.000077512690, 0.000072313040, 0.000067457780, 0.000062928440, 0.000058706520, 0.000054770280, 0.000051099180, 0.000047676540, 0.000044485670, 0.000041509940, 0.000038733240, 0.000036142030, 0.000033723520, 0.000031464870, 0.000029353260, 0.000027375730, 0.000025524330, 0.000023793760, 0.000022178700, 0.000020673830, 0.000019272260, 0.000017966400, 0.000016749910, 0.000015616480, 0.000014559770, 0.000013573870, 0.000012654360, 0.000011797230, 0.000010998440, 0.000010253980, 0.000009559646, 0.000008912044, 0.000008308358, 0.000007745769, 0.000007221456, 0.000006732475, 0.000006276423, 0.000005851304, 0.000005455118, 0.000005085868, 0.000004741466, 0.000004420236, 0.000004120783, 0.000003841716, 0.000003581652, 0.000003339127, 0.000003112949, 0.000002902121, 0.000002705645, 0.000002522525, 0.000002351726, 0.000002192415, 0.000002043902, 0.000001905497, 0.000001776509, 0.000001656215, 0.000001544022, 0.000001439440, 0.000001341977, 0.000001251141 };
	const float CIE_Y[CIE_SAMPLES] = { 0.000003917000, 0.000004393581, 0.000004929604, 0.000005532136, 0.000006208245, 0.000006965000, 0.000007813219, 0.000008767336, 0.000009839844, 0.000011043230, 0.000012390000, 0.000013886410, 0.000015557280, 0.000017442960, 0.000019583750, 0.000022020000, 0.000024839650, 0.000028041260, 0.000031531040, 0.000035215210, 0.000039000000, 0.000042826400, 0.000046914600, 0.000051589600, 0.000057176400, 0.000064000000, 0.000072344210, 0.000082212240, 0.000093508160, 0.000106136100, 0.000120000000, 0.000134984000, 0.000151492000, 0.000170208000, 0.000191816000, 0.000217000000, 0.000246906700, 0.000281240000, 0.000318520000, 0.000357266700, 0.000396000000, 0.000433714700, 0.000473024000, 0.000517876000, 0.000572218700, 0.000640000000, 0.000724560000, 0.000825500000, 0.000941160000, 0.001069880000, 0.001210000000, 0.001362091000, 0.001530752000, 0.001720368000, 0.001935323000, 0.002180000000, 0.002454800000, 0.002764000000, 0.003117800000, 0.003526400000, 0.004000000000, 0.004546240000, 0.005159320000, 0.005829280000, 0.006546160000, 0.007300000000, 0.008086507000, 0.008908720000, 0.009767680000, 0.010664430000, 0.011600000000, 0.012573170000, 0.013582720000, 0.014629680000, 0.015715090000, 0.016840000000, 0.018007360000, 0.019214480000, 0.020453920000, 0.021718240000, 0.023000000000, 0.024294610000, 0.025610240000, 0.026958570000, 0.028351250000, 0.029800000000, 0.031310830000, 0.032883680000, 0.034521120000, 0.036225710000, 0.038000000000, 0.039846670000, 0.041768000000, 0.043766000000, 0.045842670000, 0.048000000000, 0.050243680000, 0.052573040000, 0.054980560000, 0.057458720000, 0.060000000000, 0.062601970000, 0.065277520000, 0.068042080000, 0.070911090000, 0.073900000000, 0.077016000000, 0.080266400000, 0.083666800000, 0.087232800000, 0.090980000000, 0.094917550000, 0.099045840000, 0.103367400000, 0.107884600000, 0.112600000000, 0.117532000000, 0.122674400000, 0.127992800000, 0.133452800000, 0.139020000000, 0.144676400000, 0.150469300000, 0.156461900000, 0.162717700000, 0.169300000000, 0.176243100000, 0.183558100000, 0.191273500000, 0.199418000000, 0.208020000000, 0.217119900000, 0.226734500000, 0.236857100000, 0.247481200000, 0.258600000000, 0.270184900000, 0.282293900000, 0.295050500000, 0.308578000000, 0.323000000000, 0.338402100000, 0.354685800000, 0.371698600000, 0.389287500000, 0.407300000000, 0.425629900000, 0.444309600000, 0.463394400000, 0.482939500000, 0.503000000000, 0.523569300000, 0.544512000000, 0.565690000000, 0.586965300000, 0.608200000000, 0.629345600000, 0.650306800000, 0.670875200000, 0.690842400000, 0.710000000000, 0.728185200000, 0.745463600000, 0.761969400000, 0.777836800000, 0.793200000000, 0.808110400000, 0.822496200000, 0.836306800000, 0.849491600000, 0.862000000000, 0.873810800000, 0.884962400000, 0.895493600000, 0.905443200000, 0.914850100000, 0.923734800000, 0.932092400000, 0.939922600000, 0.947225200000, 0.954000000000, 0.960256100000, 0.966007400000, 0.971260600000, 0.976022500000, 0.980300000000, 0.984092400000, 0.987418200000, 0.990312800000, 0.992811600000, 0.994950100000, 0.996710800000, 0.998098300000, 0.999112000000, 0.999748200000, 1.000000000000, 0.999856700000, 0.999304600000, 0.998325500000, 0.996898700000, 0.995000000000, 0.992600500000, 0.989742600000, 0.986444400000, 0.982724100000, 0.978600000000, 0.974083700000, 0.969171200000, 0.963856800000, 0.958134900000, 0.952000000000, 0.945450400000, 0.938499200000, 0.931162800000, 0.923457600000, 0.915400000000, 0.907006400000, 0.898277200000, 0.889204800000, 0.879781600000, 0.870000000000, 0.859861300000, 0.849392000000, 0.838622000000, 0.827581300000, 0.816300000000, 0.804794700000, 0.793082000000, 0.781192000000, 0.769154700000, 0.757000000000, 0.744754100000, 0.732422400000, 0.720003600000, 0.707496500000, 0.694900000000, 0.682219200000, 0.669471600000, 0.656674400000, 0.643844800000, 0.631000000000, 0.618155500000, 0.605314400000, 0.592475600000, 0.579637900000, 0.566800000000, 0.553961100000, 0.541137200000, 0.528352800000, 0.515632300000, 0.503000000000, 0.490468800000, 0.478030400000, 0.465677600000, 0.453403200000, 0.441200000000, 0.429080000000, 0.417036000000, 0.405032000000, 0.393032000000, 0.381000000000, 0.368918400000, 0.356827200000, 0.344776800000, 0.332817600000, 0.321000000000, 0.309338100000, 0.297850400000, 0.286593600000, 0.275624500000, 0.265000000000, 0.254763200000, 0.244889600000, 0.235334400000, 0.226052800000, 0.217000000000, 0.208161600000, 0.199548800000, 0.191155200000, 0.182974400000, 0.175000000000, 0.167223500000, 0.159646400000, 0.152277600000, 0.145125900000, 0.138200000000, 0.131500300000, 0.125024800000, 0.118779200000, 0.112769100000, 0.107000000000, 0.101476200000, 0.096188640000, 0.091122960000, 0.086264850000, 0.081600000000, 0.077120640000, 0.072825520000, 0.068710080000, 0.064769760000, 0.061000000000, 0.057396210000, 0.053955040000, 0.050673760000, 0.047549650000, 0.044580000000, 0.041758720000, 0.039084960000, 0.036563840000, 0.034200480000, 0.032000000000, 0.029962610000, 0.028076640000, 0.026329360000, 0.024708050000, 0.023200000000, 0.021800770000, 0.020501120000, 0.019281080000, 0.018120690000, 0.017000000000, 0.015903790000, 0.014837180000, 0.013810680000, 0.012834780000, 0.011920000000, 0.011068310000, 0.010273390000, 0.009533311000, 0.008846157000, 0.008210000000, 0.007623781000, 0.007085424000, 0.006591476000, 0.006138485000, 0.005723000000, 0.005343059000, 0.004995796000, 0.004676404000, 0.004380075000, 0.004102000000, 0.003838453000, 0.003589099000, 0.003354219000, 0.003134093000, 0.002929000000, 0.002738139000, 0.002559876000, 0.002393244000, 0.002237275000, 0.002091000000, 0.001953587000, 0.001824580000, 0.001703580000, 0.001590187000, 0.001484000000, 0.001384496000, 0.001291268000, 0.001204092000, 0.001122744000, 0.001047000000, 0.000976589600, 0.000911108800, 0.000850133200, 0.000793238400, 0.000740000000, 0.000690082700, 0.000643310000, 0.000599496000, 0.000558454700, 0.000520000000, 0.000483913600, 0.000450052800, 0.000418345200, 0.000388718400, 0.000361100000, 0.000335383500, 0.000311440400, 0.000289165600, 0.000268453900, 0.000249200000, 0.000231301900, 0.000214685600, 0.000199288400, 0.000185047500, 0.000171900000, 0.000159778100, 0.000148604400, 0.000138301600, 0.000128792500, 0.000120000000, 0.000111859500, 0.000104322400, 0.000097335600, 0.000090845870, 0.000084800000, 0.000079146670, 0.000073858000, 0.000068916000, 0.000064302670, 0.000060000000, 0.000055981870, 0.000052225600, 0.000048718400, 0.000045447470, 0.000042400000, 0.000039561040, 0.000036915120, 0.000034448680, 0.000032148160, 0.000030000000, 0.000027991250, 0.000026113560, 0.000024360240, 0.000022724610, 0.000021200000, 0.000019778550, 0.000018452850, 0.000017216870, 0.000016064590, 0.000014990000, 0.000013987280, 0.000013051550, 0.000012178180, 0.000011362540, 0.000010600000, 0.000009885877, 0.000009217304, 0.000008592362, 0.000008009133, 0.000007465700, 0.000006959567, 0.000006487995, 0.000006048699, 0.000005639396, 0.000005257800, 0.000004901771, 0.000004569720, 0.000004260194, 0.000003971739, 0.000003702900, 0.000003452163, 0.000003218302, 0.000003000300, 0.000002797139, 0.000002607800, 0.000002431220, 0.000002266531, 0.000002113013, 0.000001969943, 0.000001836600, 0.000001712230, 0.000001596228, 0.000001488090, 0.000001387314, 0.000001293400, 0.000001205820, 0.000001124143, 0.000001048009, 0.000000977058, 0.000000910930, 0.000000849251, 0.000000791721, 0.000000738090, 0.000000688110, 0.000000641530, 0.000000598090, 0.000000557575, 0.000000519808, 0.000000484612, 0.000000451810 };
	const float CIE_Z[CIE_SAMPLES] = { 0.000606100000, 0.000680879200, 0.000765145600, 0.000860012400, 0.000966592800, 0.001086000000, 0.001220586000, 0.001372729000, 0.001543579000, 0.001734286000, 0.001946000000, 0.002177777000, 0.002435809000, 0.002731953000, 0.003078064000, 0.003486000000, 0.003975227000, 0.004540880000, 0.005158320000, 0.005802907000, 0.006450001000, 0.007083216000, 0.007745488000, 0.008501152000, 0.009414544000, 0.010549990000, 0.011965800000, 0.013655870000, 0.015588050000, 0.017730150000, 0.020050010000, 0.022511360000, 0.025202880000, 0.028279720000, 0.031897040000, 0.036210000000, 0.041437710000, 0.047503720000, 0.054119880000, 0.060998030000, 0.067850010000, 0.074486320000, 0.081361560000, 0.089153640000, 0.098540480000, 0.110200000000, 0.124613300000, 0.141701700000, 0.161303500000, 0.183256800000, 0.207400000000, 0.233692100000, 0.262611400000, 0.294774600000, 0.330798500000, 0.371300000000, 0.416209100000, 0.465464200000, 0.519694800000, 0.579530300000, 0.645600000000, 0.718483800000, 0.796713300000, 0.877845900000, 0.959439000000, 1.039050100000, 1.115367300000, 1.188497100000, 1.258123300000, 1.323929600000, 1.385600000000, 1.442635200000, 1.494803500000, 1.542190300000, 1.584880700000, 1.622960000000, 1.656404800000, 1.685295900000, 1.709874500000, 1.730382100000, 1.747060000000, 1.760044600000, 1.769623300000, 1.776263700000, 1.780433400000, 1.782600000000, 1.782968200000, 1.781699800000, 1.779198200000, 1.775867100000, 1.772110000000, 1.768258900000, 1.764039000000, 1.758943800000, 1.752466300000, 1.744100000000, 1.733559500000, 1.720858100000, 1.705936900000, 1.688737200000, 1.669200000000, 1.647528700000, 1.623412700000, 1.596022300000, 1.564528000000, 1.528100000000, 1.486111400000, 1.439521500000, 1.389879900000, 1.338736200000, 1.287640000000, 1.237422300000, 1.187824300000, 1.138761100000, 1.090148000000, 1.041900000000, 0.994197600000, 0.947347300000, 0.901453100000, 0.856619300000, 0.812950100000, 0.770517300000, 0.729444800000, 0.689913600000, 0.652104900000, 0.616200000000, 0.582328600000, 0.550416200000, 0.520337600000, 0.491967300000, 0.465180000000, 0.439924600000, 0.416183600000, 0.393882200000, 0.372945900000, 0.353300000000, 0.334857800000, 0.317552100000, 0.301337500000, 0.286168600000, 0.272000000000, 0.258817100000, 0.246483800000, 0.234771800000, 0.223453300000, 0.212300000000, 0.201169200000, 0.190119600000, 0.179225400000, 0.168560800000, 0.158200000000, 0.148138300000, 0.138375800000, 0.128994200000, 0.120075100000, 0.111700000000, 0.103904800000, 0.096667480000, 0.089982720000, 0.083845310000, 0.078249990000, 0.073208990000, 0.068678160000, 0.064567840000, 0.060788350000, 0.057250010000, 0.053904350000, 0.050746640000, 0.047752760000, 0.044898590000, 0.042160000000, 0.039507280000, 0.036935640000, 0.034458360000, 0.032088720000, 0.029840000000, 0.027711810000, 0.025694440000, 0.023787160000, 0.021989250000, 0.020300000000, 0.018718050000, 0.017240360000, 0.015863640000, 0.014584610000, 0.013400000000, 0.012307230000, 0.011301880000, 0.010377920000, 0.009529306000, 0.008749999000, 0.008035200000, 0.007381600000, 0.006785400000, 0.006242800000, 0.005749999000, 0.005303600000, 0.004899800000, 0.004534200000, 0.004202400000, 0.003900000000, 0.003623200000, 0.003370600000, 0.003141400000, 0.002934800000, 0.002749999000, 0.002585200000, 0.002438600000, 0.002309400000, 0.002196800000, 0.002100000000, 0.002017733000, 0.001948200000, 0.001889800000, 0.001840933000, 0.001800000000, 0.001766267000, 0.001737800000, 0.001711200000, 0.001683067000, 0.001650001000, 0.001610133000, 0.001564400000, 0.001513600000, 0.001458533000, 0.001400000000, 0.001336667000, 0.001270000000, 0.001205000000, 0.001146667000, 0.001100000000, 0.001068800000, 0.001049400000, 0.001035600000, 0.001021200000, 0.001000000000, 0.000968640000, 0.000929920000, 0.000886880000, 0.000842560000, 0.000800000000, 0.000760960000, 0.000723680000, 0.000685920000, 0.000645440000, 0.000600000000, 0.000547866700, 0.000491600000, 0.000435400000, 0.000383466700, 0.000340000000, 0.000307253300, 0.000283160000, 0.000265440000, 0.000251813300, 0.000240000000, 0.000229546700, 0.000220640000, 0.000211960000, 0.000202186700, 0.000190000000, 0.000174213300, 0.000155640000, 0.000135960000, 0.000116853300, 0.000100000000, 0.000086133330, 0.000074600000, 0.000065000000, 0.000056933330, 0.000049999990, 0.000044160000, 0.000039480000, 0.000035720000, 0.000032640000, 0.000030000000, 0.000027653330, 0.000025560000, 0.000023640000, 0.000021813330, 0.000020000000, 0.000018133330, 0.000016200000, 0.000014200000, 0.000012133330, 0.000010000000, 0.000007733333, 0.000005400000, 0.000003200000, 0.000001333333, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000 };
	
	const float CIE_D65[CIE_SAMPLES] = { 46.638300, 47.183400, 47.728500, 48.273500, 48.818600, 49.363700, 49.908800, 50.453900, 50.998900, 51.544000, 52.089100, 51.877700, 51.666400, 51.455000, 51.243700, 51.032300, 50.820900, 50.609600, 50.398200, 50.186900, 49.975500, 50.442800, 50.910000, 51.377300, 51.844600, 52.311800, 52.779100, 53.246400, 53.713700, 54.180900, 54.648200, 57.458900, 60.269500, 63.080200, 65.890900, 68.701500, 71.512200, 74.322900, 77.133600, 79.944200, 82.754900, 83.628000, 84.501100, 85.374200, 86.247300, 87.120400, 87.993600, 88.866700, 89.739800, 90.612900, 91.486000, 91.680600, 91.875200, 92.069700, 92.264300, 92.458900, 92.653500, 92.848100, 93.042600, 93.237200, 93.431800, 92.756800, 92.081900, 91.406900, 90.732000, 90.057000, 89.382100, 88.707100, 88.032200, 87.357200, 86.682300, 88.500600, 90.318800, 92.137100, 93.955400, 95.773600, 97.591900, 99.410200, 101.228000, 103.047000, 104.865000, 106.079000, 107.294000, 108.508000, 109.722000, 110.936000, 112.151000, 113.365000, 114.579000, 115.794000, 117.008000, 117.088000, 117.169000, 117.249000, 117.330000, 117.410000, 117.490000, 117.571000, 117.651000, 117.732000, 117.812000, 117.517000, 117.222000, 116.927000, 116.632000, 116.336000, 116.041000, 115.746000, 115.451000, 115.156000, 114.861000, 114.967000, 115.073000, 115.180000, 115.286000, 115.392000, 115.498000, 115.604000, 115.711000, 115.817000, 115.923000, 115.212000, 114.501000, 113.789000, 113.078000, 112.367000, 111.656000, 110.945000, 110.233000, 109.522000, 108.811000, 108.865000, 108.920000, 108.974000, 109.028000, 109.082000, 109.137000, 109.191000, 109.245000, 109.300000, 109.354000, 109.199000, 109.044000, 108.888000, 108.733000, 108.578000, 108.423000, 108.268000, 108.112000, 107.957000, 107.802000, 107.501000, 107.200000, 106.898000, 106.597000, 106.296000, 105.995000, 105.694000, 105.392000, 105.091000, 104.790000, 105.080000, 105.370000, 105.660000, 105.950000, 106.239000, 106.529000, 106.819000, 107.109000, 107.399000, 107.689000, 107.361000, 107.032000, 106.704000, 106.375000, 106.047000, 105.719000, 105.390000, 105.062000, 104.733000, 104.405000, 104.369000, 104.333000, 104.297000, 104.261000, 104.225000, 104.190000, 104.154000, 104.118000, 104.082000, 104.046000, 103.641000, 103.237000, 102.832000, 102.428000, 102.023000, 101.618000, 101.214000, 100.809000, 100.405000, 100.000000, 99.633400, 99.266800, 98.900300, 98.533700, 98.167100, 97.800500, 97.433900, 97.067400, 96.700800, 96.334200, 96.279600, 96.225000, 96.170300, 96.115700, 96.061100, 96.006500, 95.951900, 95.897200, 95.842600, 95.788000, 95.077800, 94.367500, 93.657300, 92.947000, 92.236800, 91.526600, 90.816300, 90.106100, 89.395800, 88.685600, 88.817700, 88.949700, 89.081800, 89.213800, 89.345900, 89.478000, 89.610000, 89.742100, 89.874100, 90.006200, 89.965500, 89.924800, 89.884100, 89.843400, 89.802600, 89.761900, 89.721200, 89.680500, 89.639800, 89.599100, 89.409100, 89.219000, 89.029000, 88.838900, 88.648900, 88.458900, 88.268800, 88.078800, 87.888700, 87.698700, 87.257700, 86.816700, 86.375700, 85.934700, 85.493600, 85.052600, 84.611600, 84.170600, 83.729600, 83.288600, 83.329700, 83.370700, 83.411800, 83.452800, 83.493900, 83.535000, 83.576000, 83.617100, 83.658100, 83.699200, 83.332000, 82.964700, 82.597500, 82.230200, 81.863000, 81.495800, 81.128500, 80.761300, 80.394000, 80.026800, 80.045600, 80.064400, 80.083100, 80.101900, 80.120700, 80.139500, 80.158300, 80.177000, 80.195800, 80.214600, 80.420900, 80.627200, 80.833600, 81.039900, 81.246200, 81.452500, 81.658800, 81.865200, 82.071500, 82.277800, 81.878400, 81.479100, 81.079700, 80.680400, 80.281000, 79.881600, 79.482300, 79.082900, 78.683600, 78.284200, 77.427900, 76.571600, 75.715300, 74.859000, 74.002700, 73.146500, 72.290200, 71.433900, 70.577600, 69.721300, 69.910100, 70.098900, 70.287600, 70.476400, 70.665200, 70.854000, 71.042800, 71.231500, 71.420300, 71.609100, 71.883100, 72.157100, 72.431100, 72.705100, 72.979000, 73.253000, 73.527000, 73.801000, 74.075000, 74.349000, 73.074500, 71.800000, 70.525500, 69.251000, 67.976500, 66.702000, 65.427500, 64.153000, 62.878500, 61.604000, 62.432200, 63.260300, 64.088500, 64.916600, 65.744800, 66.573000, 67.401100, 68.229300, 69.057400, 69.885600, 70.405700, 70.925900, 71.446000, 71.966200, 72.486300, 73.006400, 73.526600, 74.046700, 74.566900, 75.087000, 73.937600, 72.788100, 71.638700, 70.489300, 69.339800, 68.190400, 67.041000, 65.891600, 64.742100, 63.592700, 61.875200, 60.157800, 58.440300, 56.722900, 55.005400, 53.288000, 51.570500, 49.853100, 48.135600, 46.418200, 48.456900, 50.495600, 52.534400, 54.573100, 56.611800, 58.650500, 60.689200, 62.728000, 64.766700, 66.805400, 66.463100, 66.120900, 65.778600, 65.436400, 65.094100, 64.751800, 64.409600, 64.067300, 63.725100, 63.382800, 63.474900, 63.567000, 63.659200, 63.751300, 63.843400, 63.935500, 64.027600, 64.119800, 64.211900, 64.304000, 63.818800, 63.333600, 62.848400, 62.363200, 61.877900, 61.392700, 60.907500, 60.422300, 59.937100, 59.451900, 58.702600, 57.953300, 57.204000, 56.454700, 55.705400, 54.956200, 54.206900, 53.457600, 52.708300, 51.959000, 52.507200, 53.055300, 53.603500, 54.151600, 54.699800, 55.248000, 55.796100, 56.344300, 56.892400, 57.440600, 57.727800, 58.015000, 58.302200, 58.589400, 58.876500, 59.163700, 59.450900, 59.738100, 60.025300, 60.3125 };
	
	const float OPTIMAL_R[CIE_SAMPLES] = {};
	const float OPTIMAL_G[CIE_SAMPLES] = {};
	const float OPTIMAL_B[CIE_SAMPLES] = {};

#elif defined(CIE_5NM)
	const unsigned int CIE_SAMPLES = 95;
	const float CIE_STEP = 5.f;

	const float CIE_X[95] = { 0.0001299, 0.0002321, 0.0004149, 0.0007416, 0.001368, 0.002236, 0.004243, 0.00765, 0.01431, 0.02319, 0.04351, 0.07763, 0.13438, 0.21477, 0.2839, 0.3285, 0.34828, 0.34806, 0.3362, 0.3187, 0.2908, 0.2511, 0.19536, 0.1421, 0.09564, 0.05795001, 0.03201, 0.0147, 0.0049, 0.0024, 0.0093, 0.0291, 0.06327, 0.1096, 0.1655, 0.2257499, 0.2904, 0.3597, 0.4334499, 0.5120501, 0.5945, 0.6784, 0.7621, 0.8425, 0.9163, 0.9786, 1.0263, 1.0567, 1.0622, 1.0456, 1.0026, 0.9384, 0.8544499, 0.7514, 0.6424, 0.5419, 0.4479, 0.3608, 0.2835, 0.2187, 0.1649, 0.1212, 0.0874, 0.0636, 0.04677, 0.0329, 0.0227, 0.01584, 0.01135916, 0.008110916, 0.005790346, 0.004109457, 0.002899327, 0.00204919, 0.001439971, 0.0009999493, 0.0006900786, 0.0004760213, 0.0003323011, 0.0002348261, 0.0001661505, 0.000117413, 8.307527e-05, 5.870652e-05, 4.150994e-05, 2.935326e-05, 2.067383e-05, 1.455977e-05, 1.025398e-05, 7.221456e-06, 5.085868e-06, 3.581652e-06, 2.522525e-06, 1.776509e-06, 1.251141e-06 };
	const float CIE_Y[95] = { 3.917e-06, 6.965e-06, 1.239e-05, 2.202e-05, 3.9e-05, 6.4e-05, 0.00012, 0.000217, 0.000396, 0.00064, 0.00121, 0.00218, 0.004, 0.0073, 0.0116, 0.01684, 0.023, 0.0298, 0.038, 0.048, 0.06, 0.0739, 0.09098, 0.1126, 0.13902, 0.1693, 0.20802, 0.2586, 0.323, 0.4073, 0.503, 0.6082, 0.71, 0.7932, 0.862, 0.9148501, 0.954, 0.9803, 0.9949501, 1.0, 0.995, 0.9786, 0.952, 0.9154, 0.87, 0.8163, 0.757, 0.6949, 0.631, 0.5668, 0.503, 0.4412, 0.381, 0.321, 0.265, 0.217, 0.175, 0.1382, 0.107, 0.0816, 0.061, 0.04458, 0.032, 0.0232, 0.017, 0.01192, 0.00821, 0.005723, 0.004102, 0.002929, 0.002091, 0.001484, 0.001047, 0.00074, 0.00052, 0.0003611, 0.0002492, 0.0001719, 0.00012, 8.48e-05, 6e-05, 4.24e-05, 3e-05, 2.12e-05, 1.499e-05, 1.06e-05, 7.4657e-06, 5.2578e-06, 3.7029e-06, 2.6078e-06, 1.8366e-06, 1.2934e-06, 9.1093e-07, 6.4153e-07, 4.51810e-07 };
	const float CIE_Z[95] = { 0.0006061, 0.001086, 0.001946, 0.003486, 0.006450001, 0.01054999, 0.02005001, 0.03621, 0.06785001, 0.1102, 0.2074, 0.3713, 0.6456, 1.0390501, 1.3856, 1.62296, 1.74706, 1.7826, 1.77211, 1.7441, 1.6692, 1.5281, 1.28764, 1.0419, 0.8129501, 0.6162, 0.46518, 0.3533, 0.272, 0.2123, 0.1582, 0.1117, 0.07824999, 0.05725001, 0.04216, 0.02984, 0.0203, 0.0134, 0.008749999, 0.005749999, 0.0039, 0.002749999, 0.0021, 0.0018, 0.001650001, 0.0014, 0.0011, 0.001, 0.0008, 0.0006, 0.00034, 0.00024, 0.00019, 0.0001, 4.999999e-05, 3e-05, 2e-05, 1e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
	
	const float CIE_D65[95] = { 46.6383, 49.3637, 52.0891, 51.0323, 49.9755, 52.3118, 54.6482, 68.7015, 82.7549, 87.1204, 91.486, 92.4589, 93.4318, 90.057, 86.6823, 95.7736, 104.865, 110.936, 117.008, 117.41, 117.812, 116.336, 114.861, 115.392, 115.923, 112.367, 108.811, 109.082, 109.354, 108.578, 107.802, 106.296, 104.79, 106.239, 107.689, 106.047, 104.405, 104.225, 104.046, 102.023, 100.0, 98.1671, 96.3342, 96.0611, 95.788, 92.2368, 88.6856, 89.3459, 90.0062, 89.8026, 89.5991, 88.6489, 87.6987, 85.4936, 83.2886, 83.4939, 83.6992, 81.863, 80.0268, 80.1207, 80.2146, 81.2462, 82.2778, 80.281, 78.2842, 74.0027, 69.7213, 70.6652, 71.6091, 72.979, 74.349, 67.9765, 61.604, 65.7448, 69.8856, 72.4863, 75.087, 69.3398, 63.5927, 55.0054, 46.4182, 56.6118, 66.8054, 65.0941, 63.3828, 63.8434, 64.304, 61.8779, 59.4519, 55.7054, 51.959, 54.6998, 57.4406, 58.8765, 60.3125 };
	
	const float OPTIMAL_R[95] = { 0.028818291, 0.028818291, 0.028818291, 0.028818291, 0.028818291, 0.028818291, 0.028818291, 0.028818291, 0.028818291, 0.028770917, 0.028681031, 0.028507641, 0.028184712, 0.027613202, 0.026695068, 0.025387006, 0.023691176, 0.021683511, 0.019499471, 0.017284601, 0.015164369, 0.01322398, 0.011508938, 0.010032852, 0.008784129, 0.007733877, 0.006847712, 0.006113831, 0.005528477, 0.00508063, 0.004759755, 0.004559076, 0.004476933, 0.004518465, 0.004699746, 0.005051466, 0.005624523, 0.006507247, 0.007856514, 0.009955215, 0.013332373, 0.019050053, 0.029416764, 0.049957946, 0.09546049, 0.208235667, 0.469770292, 0.745606932, 0.868355627, 0.91904131, 0.942996767, 0.955787697, 0.963275107, 0.967568415, 0.970340909, 0.972202337, 0.973478536, 0.974362517, 0.974980528, 0.975415806, 0.975722246, 0.975937277, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481, 0.976087481 };
	const float OPTIMAL_G[95] = { 0.011877002, 0.011877002, 0.011877002, 0.011877002, 0.011877002, 0.011877002, 0.011877002, 0.011877002, 0.011877002, 0.011877002, 0.011886657, 0.011959757, 0.012098436, 0.012354682, 0.012802303, 0.013531737, 0.014684282, 0.016471404, 0.019223505, 0.02351872, 0.030417962, 0.042024179, 0.062721079, 0.102044876, 0.181390517, 0.337660526, 0.556197975, 0.727519207, 0.827899667, 0.88471046, 0.917913767, 0.938146992, 0.950950467, 0.959292655, 0.96480335, 0.968407165, 0.970637837, 0.971769994, 0.971878264, 0.970838189, 0.96823842, 0.963107683, 0.953211636, 0.9330891, 0.888010848, 0.775722345, 0.51480865, 0.239773366, 0.117870335, 0.067970837, 0.044705727, 0.032499914, 0.02549641, 0.021203103, 0.018430612, 0.016569185, 0.015292988, 0.014409008, 0.013790999, 0.013355721, 0.013049283, 0.012834253, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405, 0.01268405 };
	const float OPTIMAL_B[95] = { 0.959304707, 0.959304707, 0.959304707, 0.959304707, 0.959304707, 0.959304707, 0.959304707, 0.959304707, 0.959304707, 0.95935208, 0.959432313, 0.959532602, 0.959716853, 0.960032118, 0.960502632, 0.961081261, 0.961624548, 0.961845091, 0.961277031, 0.959196687, 0.954417677, 0.944751849, 0.925769991, 0.887922279, 0.809825361, 0.654605604, 0.436954319, 0.266366969, 0.166571863, 0.110208918, 0.077326487, 0.057293941, 0.044572609, 0.036188889, 0.030496912, 0.026541377, 0.023737647, 0.021722764, 0.020265225, 0.019206597, 0.018429206, 0.017842261, 0.017371594, 0.016952945, 0.016528651, 0.016041975, 0.015421044, 0.014619686, 0.013774022, 0.012987836, 0.012297489, 0.011712372, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468, 0.011228468 };

#elif defined(CIE_FIT)
	float CIE_X(float wavelength) { return (wavelength < 500.f) ? gauss(wavelength, 0.3762f, 449.0573f, 27.0226f) : gauss(wavelength, 0.8981f, 596.7094f, 44.6502f) + gauss(wavelength, 0.1214f, 549.8165f, 23.7826f); };
	float CIE_Y(float wavelength) { return gauss(wavelength, 14.0421f, 540.7364f, 21.3541f) + gauss(wavelength, -13.8573f, 540.8008f, 21.2394f) + gauss(wavelength, 0.8341f, 559.4890f, 60.2144f); };
	float CIE_Z(float wavelength) { return gauss(wavelength, 43.1393f, 449.6270f, 21.3703f) + gauss(wavelength, 0.4729f, 469.7765f, 38.1569f) + gauss(wavelength, -41.5637f, 449.6359f, 21.1548f); };

	float OPTIMAL_R(float wavelength) { return (wavelength > 560.f) ? sigmoidal(wavelength, 0.0144f, 135.0296f, 590.4639f, 0.9761f) : sigmoidal(wavelength, 0.0289f, 38.6766f, 454.7233f, 0.0062f); };
	float OPTIMAL_G(float wavelength) { return (wavelength < 545.f) ? sigmoidal(wavelength, 0.0123f, 63.3450f, 488.7451f, 0.9711f) : sigmoidal(wavelength, 0.0127f, -116.3503f, 590.4987f, 0.9699f); };
	float OPTIMAL_B(float wavelength) { return (wavelength < 500.f) ? sigmoidal(wavelength, 0.9622f, -0.1542f, 489.6339f) : sigmoidal(wavelength, 0.0122f, -37.0407f, 405.3482f, 344.2237f); };

#endif

	template <typename T> struct spec_t;
	typedef spec_t<float> spec;

	template <typename T>
	struct spec_sample
	{
		T power;
		T wavelength;

		CML_FUNC_DECL CML_CONSTEXPR spec_sample(T power, T wavelength) :
			power(power), wavelength(wavelength)
		{
		}
	};

	template <typename T>
	struct spec_t
	{
		spec_sample<T> samples[LAMBDA_SAMPLES];

		CML_FUNC_DECL CML_CONSTEXPR spec_t()
		{
			gen_wavelength_samples();
		};

		CML_FUNC_DECL CML_CONSTEXPR void gen_wavelength_samples()
		{
#if defined(WAVELENGTH_SAMPLE_HERO)
			float lambda_r = (LAMBDA_MAX - LAMBDA_MIN);
			float lambda_h = rand_float(LAMBDA_MIN, LAMBDA_MAX);
			for (int i = 0; i < LAMBDA_SAMPLES; i++)
			{
				float x = (lambda_h - LAMBDA_MIN + (float(i) / LAMBDA_SAMPLES)*lambda_r);
				float w = mod(x, lambda_r) + LAMBDA_MIN;
				samples[i] = spec_sample(static_cast<T>(0), static_cast<T>(w));
			}
#elif defined(WAVELENGTH_SAMPLE_UNIFORM)
			for (int i = 0; i < LAMBDA_SAMPLES; i++)
			{
				float w = rand_float(LAMBDA_MIN, LAMBDA_MAX);
				samples[i] = spec_sample(static_cast<T>(0), static_cast<T>(w));
			}
#elif defined(WAVELENGTH_SAMPLE_FIXED)
			for (int i = 0; i < LAMBDA_SAMPLES; i++) {
				w = (LAMBDA_MIN + float(i)*LAMBDA_STEP);
				samples[i] = spec_sample(static_cast<T>(0), static_cast<T>(w));
			}
#endif
		}
		
		CML_FUNC_DECL CML_CONSTEXPR vec3<T> xyz() const
		{
			vec3<T> xyz;
			for (int i = 0; i < LAMBDA_SAMPLES; i++) 
			{
				float p = samples[i].power;
				float w = samples[i].wavelength;
				xyz += color_match(w) * p;
			}
			return xyz * SCALE;
		};

		CML_FUNC_DECL CML_CONSTEXPR bool isnan() const
		{
			for (int i = 0; i < LAMBDA_SAMPLES; i++)
			{
				if isnan(samples[i].power) return true;
			}
			return false;
		};
	};

	/* -------------------------------------------------------------------------- */
	/*                                 Comparators                                */
	/* -------------------------------------------------------------------------- */

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR bool operator==(const spec_t<T>& s1, const spec_t<T>& s2);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR bool operator!=(const spec_t<T>& s1, const spec_t<T>& s2);

	/* -------------------------------------------------------------------------- */
	/*                               Multiplication                               */
	/* -------------------------------------------------------------------------- */

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T>& operator*=(spec_t<T>& s1, const spec_t<T>& s2);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T>& operator*=(spec_t<T>& s, const T x);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T> operator*(const spec_t<T>& s1, const spec_t<T>& s2);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T> operator*(const T x, const spec_t<T>& s);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T> operator*(const spec_t<T>& s, const T x);

	/* -------------------------------------------------------------------------- */
	/*                                  Division                                  */
	/* -------------------------------------------------------------------------- */

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T>& operator/=(spec_t<T>& s1, const spec_t<T>& s2);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T>& operator/=(spec_t<T>& s, const T x);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T> operator/(const spec_t<T>& s1, const spec_t<T>& s2);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T> operator/(const T x, const spec_t<T>& s);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T> operator/(const spec_t<T>& s, const T x);

	/* -------------------------------------------------------------------------- */
	/*                                  Addition                                  */
	/* -------------------------------------------------------------------------- */

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T>& operator+=(spec_t<T>& s1, const spec_t<T>& s2);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T>& operator+=(spec_t<T>& s, const T x);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T> operator+(const spec_t<T>& s1, const spec_t<T>& s2);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T> operator+(const T x, const spec_t<T>& s);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T> operator+(const spec_t<T>& s, const T x);

	/* -------------------------------------------------------------------------- */
	/*                                 Subtraction                                */
	/* -------------------------------------------------------------------------- */

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T>& operator-=(spec_t<T>& s1, const spec_t<T>& s2);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T>& operator-=(spec_t<T>& s, const T x);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T> operator-(const spec_t<T>& s1, const spec_t<T>& s2);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T> operator-(const T x, const spec_t<T>& s);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T> operator-(const spec_t<T>& s, const T x);

	/* -------------------------------------------------------------------------- */
	/*                                  Negation                                  */
	/* -------------------------------------------------------------------------- */

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T> operator-(const spec_t<T>& s);

	/* -------------------------------------------------------------------------- */
	/*                                    Floor                                   */
	/* -------------------------------------------------------------------------- */

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T> floor(const spec_t<T>& s);

	/* -------------------------------------------------------------------------- */
	/*                                    Ceil                                    */
	/* -------------------------------------------------------------------------- */

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T> ceil(const spec_t<T>& s);

	/* -------------------------------------------------------------------------- */
	/*                                    Frac                                    */
	/* -------------------------------------------------------------------------- */

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T> frac(const spec_t<T>& s);

	/* -------------------------------------------------------------------------- */
	/*                                     Pow                                    */
	/* -------------------------------------------------------------------------- */

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR spec_t<T> pow(const spec_t<T>& s, const T p);

	template <class T>
	CML_FUNC_DECL CML_CONSTEXPR vec3<T> color_match(T wavelength);
}

#endif // _CML_SPECTRAL_